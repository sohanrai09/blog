<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sohan’s blog</title><link>https://sohanrai09.github.io/blog/</link><description>Recent content on Sohan’s blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 02 Jan 2025 19:17:52 +0530</lastBuildDate><atom:link href="https://sohanrai09.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://sohanrai09.github.io/blog/_about/</link><pubDate>Thu, 02 Jan 2025 19:17:52 +0530</pubDate><guid>https://sohanrai09.github.io/blog/_about/</guid><description>&lt;p>Testing out the home page.&lt;/p></description></item><item><title>MDT IOS-XR</title><link>https://sohanrai09.github.io/blog/posts/mdt_iosxr/</link><pubDate>Thu, 02 Jan 2025 19:17:52 +0530</pubDate><guid>https://sohanrai09.github.io/blog/posts/mdt_iosxr/</guid><description>&lt;p>I know I&amp;rsquo;m very late to the party and probably everbody has already moved to Telemetry, but during the Annual shutdown of Dec &amp;lsquo;24, I wanted to set this up in my personal lab and play around. I have been testing Model Driven Telemetry(MDT) on Cisco&amp;rsquo;s IOS-XR for a while, so I wanted to share some of my learnings to help someone along their way for setting up telemetry. I will be primarily focusing on Cisco IOS-XR&amp;rsquo;s implementation of MDT, more precisely GRPC DIAL-OUT for now.&lt;/p></description></item><item><title>Network TUI</title><link>https://sohanrai09.github.io/blog/posts/network-tui/</link><pubDate>Thu, 03 Aug 2023 18:28:20 +0530</pubDate><guid>https://sohanrai09.github.io/blog/posts/network-tui/</guid><description>&lt;p>At the end of my previous 
 &lt;a href="https://sohanrai09.github.io/new-blog/2023/04/network-dashboard/">blog post&lt;/a> I mentioned about wanting to work on 
 &lt;a href="https://textual.textualize.io/">Textual&lt;/a>, and I&amp;rsquo;m excited to share here my first project using Textual. I feel like for us network engineers, working on a CLI makes our work more enjoyable so naturally, building a TUI(Terminal User Interface) to do some of the automation tasks was a no-brainer to me. I have called it &lt;code>Net-TUI&lt;/code>, a TUI application to do few network automation tasks.&lt;/p></description></item><item><title>Network Dashboard</title><link>https://sohanrai09.github.io/blog/posts/network-dashboard/</link><pubDate>Mon, 03 Apr 2023 18:28:20 +0530</pubDate><guid>https://sohanrai09.github.io/blog/posts/network-dashboard/</guid><description>&lt;p>In this blog post I will be going through how I went about building a Network Dashboard using couple of my favorite Python libraries, Nornir and Rich. I&amp;rsquo;m quite sure that if you have been exploring the network automation world, you would have come across 
 &lt;a href="https://nornir.readthedocs.io/en/latest/">Nornir&lt;/a> already. And similarly there is a very good chance that you have also come across 
 &lt;a href="https://rich.readthedocs.io/en/stable/introduction.html">Rich&lt;/a>, which is in my opinion one of the coolest libraries out there! If you are someone who loves working in CLI, like I do, you will absolutely love Rich!&lt;/p></description></item><item><title>Robotframework-3</title><link>https://sohanrai09.github.io/blog/posts/robotframework-3/</link><pubDate>Sun, 14 Aug 2022 10:13:42 +0530</pubDate><guid>https://sohanrai09.github.io/blog/posts/robotframework-3/</guid><description>&lt;p>In this blog post I&amp;rsquo;ll be going through a Test Scenario which involves multiple Test Cases with some interesting checks. I will be covering only the new things I&amp;rsquo;ve added for this Test Scenario when compared to my earlier posts, which can be found 
 &lt;a href="https://sohanrai09.github.io/new-blog/">here&lt;/a>. Test Suite begins by validating the network status on a particular device, this involves checking protocols such as OSPF, BGP, Interface Status etc. After ensuring network is in steady state, a configuration change is executed and after the change, network is validated again to ensure there has been no network impact.&lt;/p></description></item><item><title>Robotframework-2</title><link>https://sohanrai09.github.io/blog/posts/robotframework-2/</link><pubDate>Fri, 10 Jun 2022 19:02:18 +0530</pubDate><guid>https://sohanrai09.github.io/blog/posts/robotframework-2/</guid><description>&lt;p>It&amp;rsquo;s been a while since my first 
 &lt;a href="https://sohanrai09.github.io/new-blog/2022/04/robot-framework-1/">blog post&lt;/a> as I mentioned there, I&amp;rsquo;m at a new job (well it&amp;rsquo;s been 2 months, so &amp;rsquo;newish&amp;rsquo;) and I&amp;rsquo;ve been busy getting to know the job(as with any job, there is a LOT to learn!).&lt;/p>
&lt;p>Learning 
 &lt;a href="https://robotframework.org/">Robot Framework&lt;/a> (RF) has been one of my objectives in these first few months as that is entirely new for me. As I continue to learn and explore RF, I wanted to take some time out to share few things I have learnt. When it comes to network testing, it&amp;rsquo;s not always about testing features, protocols, it also involves testing the hardware components. In this blog post, I want to discuss one such test scenario. This particular Test scenario would be to restart a FPC numerous times and to check and ensure it comes back up to Online state. This is what we call a &lt;code>Negative Trigger Event&lt;/code> Testing. Now imagine having to do this manually, needless to say it&amp;rsquo;s a time consuming task, this is where RF comes into play.&lt;/p></description></item><item><title>Robotframework-1</title><link>https://sohanrai09.github.io/blog/posts/robotframework-1/</link><pubDate>Sun, 03 Apr 2022 18:28:20 +0530</pubDate><guid>https://sohanrai09.github.io/blog/posts/robotframework-1/</guid><description>&lt;p>In my new job role as a Test Engineer, knowing how to use Robot Framework for Automating Test Cases is crucial, to save time and to make testing more fun! As I&amp;rsquo;m going through this learning journey, I wanted to blog about it for anyone who is looking to start this journey and also to help me understand things in a better way.&lt;/p>
&lt;p>There are plenty of good resources out there which explains the Robot Framework and it&amp;rsquo;s components. Best place to start would be the 
 &lt;a href="https://robotframework.org/">Robot Framework Documentation&lt;/a>, which shows some interactive examples and very clear explaination. During my learning what I have come to realise is, there are lot of resources around Robot Framework used for Application Testing but there are not a lot of resources focused on Network Testing(or maybe I haven&amp;rsquo;t been thorough with my search!). That&amp;rsquo;s also one of the reaons for starting this blog, to give a Network Engineer&amp;rsquo;s perspective on Robot Framework and use the examples around networking to help us understand this better.&lt;/p></description></item></channel></rss>